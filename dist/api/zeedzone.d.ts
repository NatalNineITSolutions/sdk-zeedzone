export default class ZeedOneAPI {
    private axiosClient;
    constructor(ApiKey: string);
    login(email: string, password: string): Promise<any>;
    refresh(): Promise<any>;
    logout(): Promise<any>;
    getCompany(): Promise<any>;
    getLeads(): Promise<any>;
    getLeadByID(id: number): Promise<any>;
    addLead(data: object): Promise<any>;
    updateLead(id: number, data: object): Promise<any>;
    deleteLead(id: number): Promise<any>;
    getLeadSource(): Promise<any>;
    getLeadCustomFields(): Promise<any>;
    getLeadDetails(): Promise<any>;
    getLeadDetailsById(id: number): Promise<any>;
    getClients(): Promise<any>;
    getClientByID(id: number): Promise<any>;
    addClient(data: object): Promise<any>;
    updateClient(id: number, data: object): Promise<any>;
    deleteClient(id: number): Promise<any>;
    getAllEmployees(): Promise<any>;
    getEmplyoeesByID(id: number): Promise<any>;
    addEmployee(data: object): Promise<any>;
    deleteEmployee(id: number): Promise<any>;
    editEmployee(id: number, data: object): Promise<any>;
    getAllDeparment(): Promise<any>;
    getDeparmentByID(id: number): Promise<any>;
    addDeparment(data: object): Promise<any>;
    deleteDeparment(id: number): Promise<any>;
    editDeparment(id: number, data: object): Promise<any>;
    getAllDesignation(): Promise<any>;
    getDesignationByID(id: number): Promise<any>;
    addDesignation(data: object): Promise<any>;
    deleteDesignation(id: number): Promise<any>;
    editDesignation(id: number, data: object): Promise<any>;
    getAllHoliday(): Promise<any>;
    getAllHolidayById(id: number): Promise<any>;
    addHoliday(data: object): Promise<any>;
    deleteHoliday(id: number): Promise<any>;
    editHoliday(id: number, data: object): Promise<any>;
    getAllProjects(): Promise<any>;
    getMyProjects(id: number): Promise<any>;
    getProjectsByWithQuery(): Promise<any>;
    getProjectById(id: number): Promise<any>;
    getProjectTasks(projectID: number): Promise<any>;
    addProject(data: object): Promise<any>;
    editProject(id: number, data: object): Promise<any>;
    deleteProject(id: number): Promise<any>;
    getAllTasks(): Promise<any>;
    getAllSubTasksByTaskId(id: number): Promise<any>;
    getSubTasksByTaskIdAndSubTaskId(taskid: number, subTaskId: number): Promise<any>;
    addTask(data: object): Promise<any>;
    editTask(taskID: number, data: object): Promise<any>;
    deleteTask(taskID: number): Promise<any>;
    getAllContractType(): Promise<any>;
    getContractTypeById(id: number): Promise<any>;
    addContractType(data: object): Promise<any>;
    EditContractType(id: number, data: object): Promise<any>;
    deleteContractType(id: number): Promise<any>;
    getAllContract(): Promise<any>;
    addContract(data: object): Promise<any>;
    getContractById(id: number): Promise<any>;
    editContract(id: number, data: object): Promise<any>;
    deleteContract(id: number): Promise<any>;
    getAllEstimates(): Promise<any>;
    addEstimates(data: object): Promise<any>;
    getEstimatesById(id: number): Promise<any>;
    editEstimates(id: number, data: object): Promise<any>;
    deleteEstimates(id: number): Promise<any>;
    getAllInvoices(): Promise<any>;
    addInvoice(data: object): Promise<any>;
    getInvoicesById(id: number): Promise<any>;
    editInvoice(id: number, data: object): Promise<any>;
    deleteInvoice(id: number): Promise<any>;
    getAllNotice(): Promise<any>;
    addNotice(data: object): Promise<any>;
    getNoticeById(id: number): Promise<any>;
    editNotice(id: number, data: object): Promise<any>;
    deleteNotice(id: number): Promise<any>;
    getAllEvents(): Promise<any>;
    addEvents(data: object): Promise<any>;
    getEventById(id: number): Promise<any>;
    editEvents(id: number, data: object): Promise<any>;
    deleteEvents(id: number): Promise<any>;
    getAllProducts(): Promise<any>;
    addProducts(data: object): Promise<any>;
    getProductById(id: number): Promise<any>;
    editProducts(id: number, data: object): Promise<any>;
    deleteProducts(id: number): Promise<any>;
    AttendenceClocksIn(data: object): Promise<any>;
    AttendenceClocksOut(data: object): Promise<any>;
    getAllTickets(): Promise<any>;
    getAllTicketType(): Promise<any>;
    getAllGroup(): Promise<any>;
    getTicketMe(): Promise<any>;
    getTicketUsers(id: number): Promise<any>;
    getTicketReply(): Promise<any>;
    getAllsChats(): Promise<any>;
    getAllOrders(): Promise<any>;
    getMyOrders(): Promise<any>;
    addOrder(data: object): Promise<any>;
    getPaymentCredentials(data: object): Promise<any>;
    getAllProductCategory(): Promise<any>;
    getProductCategoryId(id: number): Promise<any>;
    addCostCode(data: object): Promise<any>;
    updateCostCode(id: number, data: object): Promise<any>;
    deleteCostCode(id: number): Promise<any>;
    getCostCode(): Promise<any>;
    addSubCostCode(data: object): Promise<any>;
    updateSubCostCode(id: number, data: object): Promise<any>;
    deleteSubCostCode(id: number): Promise<any>;
    getSubCostCode(): Promise<any>;
    addParty(data: object): Promise<any>;
    getParties(): Promise<any>;
}
//# sourceMappingURL=zeedzone.d.ts.map